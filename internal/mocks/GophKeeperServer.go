// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	gophkeeper "gophkeeper/pkg/grpc/proto"

	mock "github.com/stretchr/testify/mock"
)

// GophKeeperServer is an autogenerated mock type for the GophKeeperServer type
type GophKeeperServer struct {
	mock.Mock
}

// CheckConn provides a mock function with given fields: _a0, _a1
func (_m *GophKeeperServer) CheckConn(_a0 context.Context, _a1 *gophkeeper.CCRequest) (*gophkeeper.CCResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gophkeeper.CCResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.CCRequest) *gophkeeper.CCResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.CCResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.CCRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *GophKeeperServer) Login(_a0 context.Context, _a1 *gophkeeper.LoginRequest) (*gophkeeper.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gophkeeper.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.LoginRequest) *gophkeeper.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: _a0, _a1
func (_m *GophKeeperServer) RefreshToken(_a0 context.Context, _a1 *gophkeeper.RefreshTokenRequest) (*gophkeeper.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gophkeeper.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.RefreshTokenRequest) *gophkeeper.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.RefreshTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *GophKeeperServer) Register(_a0 context.Context, _a1 *gophkeeper.RegisterRequest) (*gophkeeper.RegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gophkeeper.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.RegisterRequest) *gophkeeper.RegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.RegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncData provides a mock function with given fields: _a0, _a1
func (_m *GophKeeperServer) SyncData(_a0 context.Context, _a1 *gophkeeper.SyncDataRequest) (*gophkeeper.SyncDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gophkeeper.SyncDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.SyncDataRequest) *gophkeeper.SyncDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.SyncDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.SyncDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedGophKeeperServer provides a mock function with given fields:
func (_m *GophKeeperServer) mustEmbedUnimplementedGophKeeperServer() {
	_m.Called()
}
