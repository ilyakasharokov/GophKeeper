// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	gophkeeper "gophkeeper/pkg/grpc/proto"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GophKeeperClient is an autogenerated mock type for the GophKeeperClient type
type GophKeeperClient struct {
	mock.Mock
}

// CheckConn provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) CheckConn(ctx context.Context, in *gophkeeper.CCRequest, opts ...grpc.CallOption) (*gophkeeper.CCResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gophkeeper.CCResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.CCRequest, ...grpc.CallOption) *gophkeeper.CCResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.CCResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.CCRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) Login(ctx context.Context, in *gophkeeper.LoginRequest, opts ...grpc.CallOption) (*gophkeeper.LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gophkeeper.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.LoginRequest, ...grpc.CallOption) *gophkeeper.LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) RefreshToken(ctx context.Context, in *gophkeeper.RefreshTokenRequest, opts ...grpc.CallOption) (*gophkeeper.LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gophkeeper.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.RefreshTokenRequest, ...grpc.CallOption) *gophkeeper.LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.RefreshTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) Register(ctx context.Context, in *gophkeeper.RegisterRequest, opts ...grpc.CallOption) (*gophkeeper.RegisterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gophkeeper.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.RegisterRequest, ...grpc.CallOption) *gophkeeper.RegisterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncData provides a mock function with given fields: ctx, in, opts
func (_m *GophKeeperClient) SyncData(ctx context.Context, in *gophkeeper.SyncDataRequest, opts ...grpc.CallOption) (*gophkeeper.SyncDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gophkeeper.SyncDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *gophkeeper.SyncDataRequest, ...grpc.CallOption) *gophkeeper.SyncDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gophkeeper.SyncDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gophkeeper.SyncDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
