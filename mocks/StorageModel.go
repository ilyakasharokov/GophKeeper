// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "gophkeeper/internal/common/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StorageModel is an autogenerated mock type for the StorageModel type
type StorageModel struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: title, body, key
func (_m *StorageModel) AddItem(title string, body string, key []byte) error {
	ret := _m.Called(title, body, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(title, body, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckFile provides a mock function with given fields:
func (_m *StorageModel) CheckFile() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Flush provides a mock function with given fields: hash
func (_m *StorageModel) Flush(hash []byte) error {
	ret := _m.Called(hash)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByIndex provides a mock function with given fields: index
func (_m *StorageModel) GetByIndex(index int) (models.Note, error) {
	ret := _m.Called(index)

	var r0 models.Note
	if rf, ok := ret.Get(0).(func(int) models.Note); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(models.Note)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataLen provides a mock function with given fields:
func (_m *StorageModel) GetDataLen() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetLastSyncDate provides a mock function with given fields:
func (_m *StorageModel) GetLastSyncDate() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetNonSyncedData provides a mock function with given fields:
func (_m *StorageModel) GetNonSyncedData() []models.Note {
	ret := _m.Called()

	var r0 []models.Note
	if rf, ok := ret.Get(0).(func() []models.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	return r0
}

// GetNotes provides a mock function with given fields: all
func (_m *StorageModel) GetNotes(all bool) []models.Note {
	ret := _m.Called(all)

	var r0 []models.Note
	if rf, ok := ret.Get(0).(func(bool) []models.Note); ok {
		r0 = rf(all)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	return r0
}

// Load provides a mock function with given fields: hash
func (_m *StorageModel) Load(hash []byte) error {
	ret := _m.Called(hash)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDeleted provides a mock function with given fields: index
func (_m *StorageModel) SetDeleted(index int) error {
	ret := _m.Called(index)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateData provides a mock function with given fields: newData, lastSync
func (_m *StorageModel) UpdateData(newData []models.Note, lastSync time.Time) error {
	ret := _m.Called(newData, lastSync)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Note, time.Time) error); ok {
		r0 = rf(newData, lastSync)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
